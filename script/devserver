#!/usr/bin/env ruby
require 'getoptlong'
require 'yaml'
CODE_ROOT = "#{File.expand_path("#{File.dirname(__FILE__)}/..")}" unless defined?(CODE_ROOT)

def self.load_defaults_from_yaml
  configfile ="#{CODE_ROOT}/config/devserver.yml"
  if File.exists?(configfile) then
    @devserver_settings['configfile'] = configfile
    @devserver_settings_source['configfile'] = 'default'
    temp = YAML.load_file(configfile)
    if temp.class == Hash
      temp.each do |key,value|
        @devserver_settings[key] = value
        @devserver_settings_source[key] = 'config file'
      end
    end
  end   
end


### Program Options
progopts = GetoptLong.new(
  [ "--start", GetoptLong::NO_ARGUMENT ],
  [ "--stop", GetoptLong::NO_ARGUMENT ],
  [ "--debugger", GetoptLong::NO_ARGUMENT ],
  [ "--analytics", GetoptLong::NO_ARGUMENT ],
  [ "--daemonize",'-d', GetoptLong::NO_ARGUMENT ],
  [ "--environment",'-e', GetoptLong::OPTIONAL_ARGUMENT ],
  [ "--port",'-p', GetoptLong::OPTIONAL_ARGUMENT ],
  [ "--log-file", GetoptLong::OPTIONAL_ARGUMENT ],
  [ "--pid-file", GetoptLong::OPTIONAL_ARGUMENT ]
)

@start = true
@devserver_settings = {}
@devserver_settings_source = {}

# defaults
@devserver_settings['port'] = 3000
@devserver_settings['debugger'] = false
@devserver_settings['daemonize'] = false
@devserver_settings['analytics'] = false
@devserver_settings['environment'] = 'development'
@devserver_settings['log-file'] = "#{CODE_ROOT}/log/passenger.log"
@devserver_settings['pid-file'] = "#{CODE_ROOT}/tmp/pids/passenger.pid"

@devserver_settings_source['port'] = 'default'
@devserver_settings_source['debugger'] = 'default'
@devserver_settings_source['daemonize'] = 'default'
@devserver_settings_source['analytics'] = 'default'
@devserver_settings_source['environment'] = 'default'
@devserver_settings_source['log-file'] = 'default'
@devserver_settings_source['pid-file'] = 'default'

# override
self.load_defaults_from_yaml


progopts.each do |option, arg|
  case option
  when '--debugger'
    @devserver_settings['debugger'] = true
    @devserver_settings_source['debugger'] = 'command line'
  when '--analytics'
    @devserver_settings['analytics'] = true
    @devserver_settings_source['analytics'] = 'command line'
  when '--daemonize'
    @devserver_settings['daemonize'] = true
    @devserver_settings_source['daemonize'] = 'command line'
  when '--environment'
    @devserver_settings['environment'] = arg
    @devserver_settings_source['environment'] = 'command line'
  when '--port'
    @devserver_settings['port'] = arg.to_i
    @devserver_settings_source['port'] = 'command line'
  when '--log-file'
    @devserver_settings['log-file'] = arg
    @devserver_settings_source['log-file'] = 'command line'
  when '--pid-file'
    @devserver_settings['pid-file'] = arg
    @devserver_settings_source['pid-file'] = 'command line'
  when '--start'
    @start = true
  when '--stop'
    @start = false
  else
    puts "Unrecognized option #{opt}"
    exit 0
  end
end
### END Program Options

if(@start)
  label = "starting passenger"
  command = "passenger start"
  options = "--port #{@devserver_settings['port']} --environment #{@devserver_settings['environment']} --log-file #{@devserver_settings['log-file']} --pid-file #{@devserver_settings['pid-file']}"
  options += ' --debugger' if(@devserver_settings['debugger'])
  options += ' --daemonize' if(@devserver_settings['daemonize'])
  options += ' --analytics' if(@devserver_settings['analytics'])  
else
  label = "stopping passenger"  
  command = "passenger stop"
  options = "--port #{@devserver_settings['port']} --pid-file #{@devserver_settings['pid-file']}"
end

puts "=== #{label} ===\n"
puts "options:\n"
@devserver_settings.keys.sort.each do |key|
  puts "  #{key} => #{@devserver_settings[key]} (#{@devserver_settings_source[key]})\n"
end
puts "command:\n"
puts "#{command} #{options}"
puts "==========================\n\n\n"
# will exit
exec("#{command} #{options}") 