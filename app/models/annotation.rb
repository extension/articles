# === COPYRIGHT:
#  Copyright (c) 2005-2010 North Carolina State University
#  Developed with funding for the National eXtension Initiative.
# === LICENSE:
#  BSD(-compatible)
#  see LICENSE file or view at http://about.extension.org/wiki/LICENSE

require 'lib/gdata_cse'

class Annotation < ActiveRecord::Base
  validates_length_of :url, :within => 1..1024
  validates_uniqueness_of :href
  
  has_many :annotation_events, :primary_key => :url
  
  after_save :log_add
  before_destroy :log_delete
  
  @@client = nil
  
  # href - id generated by google
  # url - URL string WITHOUT leading http://
  # added_at - date added by Google to CSE
  
  named_scope :patternsearch, lambda {|searchterm|
    # remove any leading * to avoid borking mysql
    # remove any '\' characters because it's WAAAAY too close to the return key
    # strip '+' characters because it's causing a repitition search error
    sanitizedsearchterm = searchterm.gsub(/\\/,'').gsub(/^\*/,'$').gsub(/\+/,'').strip
    # in the format wordone wordtwo etc?
    words = sanitizedsearchterm.split(%r{\s+})
    conditions = Array.new
    if(words.length > 1)
      words.each do |word|
        conditions << "url rlike '#{word}'"
      end
    elsif(sanitizedsearchterm.to_i != 0)
      # special case of an id search - needed in admin/colleague searches
      conditions << "id = #{sanitizedsearchterm.to_i}"
    else
      conditions << "url rlike '#{sanitizedsearchterm}'"
    end
    {:conditions => conditions.compact.join(" AND ")}
  }
  
  def add(url)
    rc = false
    result = @@client.addAnnotation(url)
    if result
      data = result.pop
      data.each do |key, value|
        self.send("#{key}=", value)
        self.save
      end
      rc = true
    end
    return rc
  end
  
  def remove
    rc = false
    if Annotation.remove(self.href)
      self.destroy
      rc = true
    end
    return rc
  end
  
  def after_initialize
    Annotation.login
  end
  
  def added_at=(microseconds)
    write_attribute(:added_at, Time.at(Integer(microseconds)/1000000))
  end
  
  def log_add
    self.log_event(AnnotationEvent::URL_ADDED)
  end
  
  def log_delete
    self.log_event(AnnotationEvent::URL_DELETED)
  end
 
  def log_event(action)
    AnnotationEvent.log_event(self, action)
  end
  
  class << self
    
    def login
      if @@client.nil?
        @@client = GData::Client::Cse.new
        rc = @@client.clientlogin(AppConfig.configtable['cse_uid'],
                              AppConfig.configtable['cse_secret'])
      end
    end
    
    def remove(href)
      rc = false
      result = @@client.removeAnnotation(href)
      if result
        rc = true
      end
      return rc
    end
    
    def initial_setup
      self.login
      urls = @@client.getAnnotations
      
      added = errs = 0
      
      urls.each do |url|
        begin
          a = Annotation.new(url)
          a.save!
          added += 1
        rescue
          errs += 1
        end
      end
      
      return {:added => added, :errs => errs}
    end
    
  end
end
