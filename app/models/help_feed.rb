require 'atom'
require 'net/http'
require 'uri'

# Class responsible for the actual retrieving and parsing of (atom) feeds.
# Currently using Atom parser for Ruby:
#  http://split-s.blogspot.com/2006/04/atom-10-parser-for-ruby.html
#
class HelpFeed < ActiveRecord::Base
  
  # Fetch and parse the Atom feed at the given address.
  # param page is the string-name of the desired page in the target wiki (eg. "Identity")
  # usage: HelpFeed.fetch_feed(page)
  def self.fetch_feed(page)
    pageTitle = page.gsub(" ", "_") # URIs dont like spaces, and wikis convert them to underscores anyways, so go ahead and do it
    local_feed = HelpFeed.find_by_title(pageTitle)
    if !local_feed.nil?
      if !local_feed.up_to_date?
        local_feed.update_feed
      end
    else
      target = URI.parse(AppConfig.configtable['target_wiki']+pageTitle+"?action=feed") #?action=feed used to make use of wikiatomizer
      local_feed = HelpFeed.new(:content => HelpFeed.get_feed(target), :title => pageTitle, :etag => HelpFeed.get_etag(target))
      local_feed.save
    end
    return local_feed.content  
  end
  
  # retrieves the content of a given feed from the target wiki
  # target param is a URI object
  # usage: HelpFeed.get_feed(target)
  def self.get_feed(target)
    output = ""
    feed = Atom::Feed.new(Net::HTTP::get(target))
    feed.entries.each{ |entry| output << entry.content.value.to_s  }
    if output.match("wiki:pcache:idhash:0") #a substring of the default hash for a blank page from wikiatomizer
      output = "<p>There is currently no help page for #{target.path}</p>"
    else
      output = output.gsub("<a href=\"/wiki", "<a href=\"/help") #change wiki links to point back through help instead of to the wiki
      output = output.gsub("<a href=\"Image:", "<a href=\""+AppConfig.configtable["target_wiki"]+"Image:") #point image links back through help
    end
    return output
  end
  
  def url
    return AppConfig.configtable['target_wiki']+self.title+"?action=feed"
  end
  
  # retrieves the etag information for an article
  # target param is a URI object
  # usage: HelpFeed.get_etag(target)
  def self.get_etag(target)
    return Net::HTTP.start(target.host,80).head(target.path).header['etag']
  end
  
  # checks to see if the local copy of the feed matches the target copy of the feed. this is achieved by comparing the
  # local ETag hash to the ETag hash generated by mediawiki
  # usage: some_feed.up_to_date?
  def up_to_date?
    return self.etag == HelpFeed.get_etag(URI.parse(self.url))
  end
  
  # retrieve the latest copy of an already stored feed from the target wiki and update to db
  # usage: some_feed.update_feed 
  def update_feed
    self.content = HelpFeed.get_feed(URI.parse(self.url))
    self.etag = HelpFeed.get_etag(URI.parse(self.url))
    self.save
  end
end
